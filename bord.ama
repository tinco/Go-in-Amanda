|| Het Go bord

posStateTp == spelerTp
positionTp == (num, num)
goBordTp == [[posStateTp]]

|| Makes a new board of the given size.
newBord :: num -> goBordTp  
newBord bord_size = (repeat bord_size (repeat bord_size None))

|| Returns the state of a position
getPosition :: goBordTp -> positionTp -> posStateTp
getPosition bord (x, y)
  = ((bord ! x) ! y)

|| Sets a position on the board.
setPosition :: goBordTp -> posStateTp -> positionTp -> goBordTp
setPosition bord state (x, y)
  = update bord x (update (bord ! x) y state)
    
|| Sets a position and then resolves any captures that may result to that move
|| and returns the points awarded for those captures.
move :: goBordTp -> posStateTp -> positionTp -> (goBordTp, num)
move bord color position
  = (new_bord, score)
  where
    bord_m = setPosition bord color position
    buren = [b | b<- neighbours bord_m position ; getPosition bord_m b = nextPlayer color]
    dode_buren = filter (isGroupDead bord_m) (map (group bord_m) buren)
    score = foldl (t -> g -> t+(#g)) 0 dode_buren
    new_bord = foldl killGroup bord_m dode_buren

|| Returns the neighbouring positions to a position
neighbours :: goBordTp -> positionTp -> [positionTp]
neighbours bord (x,y)
  = buurposities
  where
    bord_size = #bord
    links  = [(x-1, y)] , if x > 0
           = [] , otherwise
    rechts = [(x+1, y)] , if x < (bord_size - 1)
           = [] , otherwise
    boven  = [(x,y+1)] , if y < (bord_size - 1)
           = [] , otherwise
    onder  = [(x, y-1)] , if y > 0
           = [] , otherwise
    buurposities = links ++ rechts ++ boven ++ onder
    
|| Returns the liberties a single position has.
posLiberties :: goBordTp -> positionTp -> [positionTp]
posLiberties bord position
  = [ p | p <- (neighbours bord position) ; getPosition bord p = None]

|| Returns the group of stones a position is a part of.    
group :: goBordTp -> positionTp -> [positionTp]
group bord positie
  = h_groep bord [] [positie]

h_groep :: goBordTp -> [positionTp] -> [positionTp] -> [positionTp]
h_groep bord collected fringe
  = h_groep bord new_collected new_fringe, if new_fringe ~= []
  = new_collected , otherwise
  where
    kleur = getPosition bord (hd fringe)
    new_collected = collected ++ fringe
    new_fringe = (unique 
                  ( filter
                    (x-> getPosition bord x = kleur)  
                    (concat (map (neighbours bord) fringe))
                  )
                 ) -- collected

|| Returns the liberties a group of stones has
groupLiberties :: goBordTp -> [positionTp] -> [positionTp]
groupLiberties bord group
  = unique (concat (map (posLiberties bord) group))

|| Returns wether a group has any liberties.
isGroupDead :: goBordTp -> [positionTp] -> bool    
isGroupDead bord groep
  = groupLiberties bord groep = Nil
  
|| Removes a group from the board.
killGroup :: goBordTp -> [positionTp] -> goBordTp
killGroup bord groep
  = foldl (b -> p -> setPosition b None p) bord groep

|| Example group used for testing      
ex_group = [[Black, Black, Black] ,
            [Black, None,  Black] ,
            [Black, Black, None ] ]

|| Geeft de posities voor de stenen. Op het bord. 
getPositions :: goBordTp -> [(positionTp,spelerTp)]      
getPositions bord
  = concat (zipwith (rij->space_x->
                 (zipwith (steen->space_y->
                   ((space_x, space_y), steen)
                  ) rij ( (nat 0 (bord_size -1))) ) || Spiegelen in de y-as
                ) bord (nat 0 (bord_size -1)) )
  where
    bord_size = #bord
      
|| Gets all stones with their positions
getStones :: goBordTp -> [(positionTp, spelerTp)]
getStones bord
  = filter ((_,c)-> c~= None) (getPositions bord)

|| Gets all groups of stones      
getGroups :: goBordTp -> [([positionTp], spelerTp)]
getGroups bord
  = h_groups bord ([p | (p,c)<-(getStones bord)]) []
    
|| Gets all territories (linked empty positions)
getTerritories :: goBordTp -> [[positionTp]]
getTerritories bord
  = [g | (g,k)<- (h_groups bord ([p | (p,c)<-(getPositions bord) ; c = None]) [])]
    
|| Returns the owner of a territory or None if it is contested.
getOwner :: goBordTp -> [positionTp] -> spelerTp
getOwner bord territory
  = Black , if border_colours = [Black]
  = White , if border_colours = [White]
  = None , otherwise
  where
    border_colours = ( unique 
                      ( filter
                        (x-> x ~= None)  
                        (map (getPosition bord) (concat (map (neighbours bord) territory)))
                      )
                     )

|| Helper method to getGroups and getTerritories    
h_groups bord [] groups = groups
h_groups bord ((position):positions) groups
  = h_groups bord new_positions new_groups
  where
    new_group = (group bord position)
    kleur = getPosition bord position
    new_groups = (new_group, kleur) : groups
    new_positions = positions -- new_group