|| Het Go bord

posStateTp == spelerTp
positionTp == (num, num)
goBordTp == [[posStateTp]]
  
newBord bord_size = (repeat bord_size (repeat bord_size None))

getPosition :: goBordTp -> positionTp -> posStateTp
getPosition bord (x, y)
  = ((bord ! x) ! y)

setPosition :: goBordTp -> posStateTp -> positionTp -> goBordTp
setPosition bord state (x, y)
  = update bord x (update (bord ! x) y state)
    
move bord color position
  = (new_bord, score)
  where
    bord_m = setPosition bord color position
    buren = [b | b<- neighbours bord_m position ; getPosition bord_m b = nextPlayer color]
    dode_buren = filter (isGroupDead bord_m) (map (group bord_m) buren)
    score = foldl (t -> g -> t+(#g)) 0 dode_buren
    new_bord = foldl killGroup bord_m dode_buren

neighbours :: goBordTp -> positionTp -> [positionTp]
neighbours bord (x,y)
  = buurposities
  where
    bord_size = #bord
    links  = [(x-1, y)] , if x > 0
           = [] , otherwise
    rechts = [(x+1, y)] , if x < (bord_size - 1)
           = [] , otherwise
    boven  = [(x,y+1)] , if y < (bord_size - 1)
           = [] , otherwise
    onder  = [(x, y-1)] , if y > 0
           = [] , otherwise
    buurposities = links ++ rechts ++ boven ++ onder
    
posLiberties :: goBordTp -> positionTp -> [positionTp]
posLiberties bord position
  = [ p | p <- (neighbours bord position) ; getPosition bord p = None]
    
group :: goBordTp -> positionTp -> [positionTp]
group bord positie
  = h_groep bord [] [positie]

h_groep :: goBordTp -> [positionTp] -> [positionTp] -> [positionTp]
h_groep bord collected fringe
  = h_groep bord new_collected new_fringe, if new_fringe ~= []
  = new_collected , otherwise
  where
    kleur = getPosition bord (hd fringe)
    new_collected = collected ++ fringe
    new_fringe = (unique 
                  ( filter
                    (x-> getPosition bord x = kleur)  
                    (concat (map (neighbours bord) fringe))
                  )
                 ) -- collected

groupLiberties :: goBordTp -> [positionTp] -> [positionTp]
groupLiberties bord group
  = unique (concat (map (posLiberties bord) group))
    
isGroupDead bord groep
  = groupLiberties bord groep = Nil
  
killGroup bord groep
  = foldl (b -> p -> setPosition b None p) bord groep
      
ex_group = [[Black, Black, Black] ,
            [Black, None,  Black] ,
            [Black, Black, None ] ]
            