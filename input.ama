|| Input
  
|| Turn
|| A stone may not be placed upon another stone.
|| A stone may not result in an own group dying.
|| A stone may not recreate the previous situation.
handleTurn game (MouseUp(x,y) : es) ||Turn
  = (new_game, es) , if ~invalidpos /\ ~suicide /\ ~ko
  = handleTurn game es, otherwise
  where
    {bord=bord, speler=speler, history=history, score=score}=game
    (s_b, s_w) = score
    on_stone = onStone bord (x,y)
    Just (position) = on_stone
    invalidpos = on_stone = Nothing \/ getPosition bord position ~= None
    
    (new_bord, p_score) = move bord speler position , if ~invalidpos
                        = (bord, 0) , otherwise
    new_score = (s_b + p_score, s_w) , if speler = Black
              = (s_b, s_w + p_score) , otherwise
                
    suicide = isGroupDead new_bord (group new_bord position)
    ko = new_bord = (history ! (#history - 2)) , if #history > 2
       = False , otherwise
    ||Score
    new_history = history ++ [new_bord]
    new_game = game & {bord=new_bord, history=new_history, score=new_score, pass=0}

handleTurn game (KeyIn 'r' : es)
  = (game & {winnaar=speler}, es)
    where
      {winnaar=winnaar, speler=speler} = game
    
handleTurn game (KeyIn 'p' : es)
  = (game & {pass=pass + 1}, es)
    where
      {pass=pass} = game
        
handleTurn game (KeyIn 'l' : es)
  = handleTurn (game & {liberties = ~liberties}) es
  where
      {liberties=liberties} = game
      
handleTurn game (e : es)
  = handleTurn game es

handleBegin2 (Prompt "Bord size" bord_size : events)
  = (atoi bord_size, events)
    
handleBegin2 (e : events)
  = handleBegin2 events
    
|| Score
handleScore game (MouseUp(x,y):es)
  = (new_game,es)
  where
    {bord=bord, score=score} = game
    (s_b, s_w) = score
    on_stone = onStone bord (x,y)
    Just (position) = on_stone
    (new_bord, p_score, speler) = (killGroup bord (group bord position), #(group bord position), getPosition bord position), if on_stone ~= Nothing
                                = (bord,0, None) , otherwise
    new_score = (s_b + p_score, s_w) , if speler = Black
              = (s_b, s_w + p_score) , otherwise
                
    new_game = game & {bord=new_bord, score = new_score}

handleScore game (KeyIn 'd' : es)
  = (game & {score=(b_t,w_t), winnaar=winnaar}, es)
  where
    {bord=bord, score=score} = game
    (b_s, w_s) = score
    territories = getTerritories bord
    ter_score = k -> sum (map (#) (filter (t-> (getOwner bord t) = k) territories))
    (b_t,w_t) = (b_s + (ter_score Black), w_s + (ter_score White))
    winnaar = Black , if b_t > w_t
            = White , otherwise
    
handleScore game (e:es) = handleScore game es