|| Statemachine die door de fases van het spel gaat:

|| Main Flow:
|| Begin -> (bevestig) -> Turn *
|| Turn * -> (maakt move) -> Turn **
|| Turn * -> (maakt ongeldige move) **
|| Turn * -> (past (1e pas)) -> Turn **
|| Turn * -> (past (2e pas)) -> Score
|| Turn * -> (resign) -> Eind(**)
|| Score -> (markeer dode groep (groepen over)) -> Score
|| Score -> (markeer dode groep (geen groep over)) -> Eind(*)
|| Eind -> (bevestig) -> Begin

|| Regels: http://en.wikipedia.org/wiki/Rules_of_Go
|| Extra regels:
|| Suicide is verboden
|| Geen 

gameStateTp ::= Begin gameTp | Turn gameTp | Score gameTp | Eind gameTp
actionTp ::= Affirm | Move | Pass | Resign | Mark | InvalidMove | Nothing
  
|| gameFSA ::= gameStateTp -> actionTp -> gameStateTp
gameFSA (Begin game) Affirm = (Turn (executeBegin), Nothing)
gameFSA (Turn game) action = (newState, newAction)
                         where
                            (newGame, newAction) = executeTurn game
                            newState = Score newGame , if action = Pass /\ newAction = Pass
                                     = Eind newGame , if action = Resign
                                     = Turn newGame, otherwise
gameFSA (Score game) Pass = (Eind (executeScore game), Mark)
gameFSA (Eind game) action = (Begin (executeEind game), Affirm)
                  
nextPlayer White = Black
nextPlayer Black = White
                          
executeTurn game = (game, Move)
executeScore game = game
executeBegin = newGameState 6.5 19
executeEind game = game